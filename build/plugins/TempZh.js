// Generated by CoffeeScript 1.12.2
var SUMMARY, Str,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Str = require('../../lib.js.generic/dist/Str');

SUMMARY = "update zh-cn/tw interlanguage links to zh-hans/hant, see [[Help talk:I18n#Chinese interlanguage links]]";

module.exports.TempZh = (function() {
  TempZh.REQUIRES_GM = false;

  function TempZh(WM) {
    this.WM = WM;
    this.postWritePage = bind(this.postWritePage, this);
    this.processPage = bind(this.processPage, this);
    this.iteratePages = bind(this.iteratePages, this);
    null;
  }

  TempZh.prototype.main = function(arg, callNext) {
    var search_tag;
    search_tag = arg[0];
    this.callNext = callNext;
    this.WM.Log.logInfo("Updating zh interlanguage links...");
    return this.WM.MW.callAPIGet({
      action: "query",
      list: "langbacklinks",
      lbllimit: 500,
      lblprop: "lltitle",
      lbllang: search_tag
    }, null, (function(_this) {
      return function(res, args) {
        return _this.iteratePages(res.query.langbacklinks, 0);
      };
    })(this), [], null);
  };

  TempZh.prototype.iteratePages = function(links, index) {
    var title;
    if (links[index]) {
      title = links[index].title;
      this.WM.Log.logInfo("Updating " + title + " ...");
      return this.WM.MW.callQueryEdit(title, this.processPage, [links, index]);
    } else {
      this.WM.Log.logInfo("Links updated");
      if (this.callNext) {
        return this.callNext();
      }
    }
  };

  TempZh.prototype.processPage = function(title, source, timestamp, edittoken, arg) {
    var i, index, len, links, llinks, newText, newtag, oldtag, ref, ref1;
    links = arg[0], index = arg[1];
    newText = source;
    ref = [['zh-cn', 'zh-hans'], ['zh-tw', 'zh-hant']];
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], oldtag = ref1[0], newtag = ref1[1];
      llinks = this.WM.Parser.findInterlanguageLinks(newText, oldtag);
      if (llinks.length > 1) {
        this.WM.Log.logWarning((this.WM.Log.linkToWikiPage(title, title)) + " must be updated manually since it may contain duplicated interlanguage links");
        this.iteratePages(links, index + 1);
        return false;
      }
      if (llinks.length) {
        newText = Str.overwriteFor(newText, newtag, llinks[0].index + 2, oldtag.length);
      }
    }
    if (source !== newText) {
      return this.WM.MW.callAPIPost({
        action: "edit",
        bot: "1",
        title: title,
        summary: SUMMARY,
        text: newText,
        b1asetimestamp: timestamp,
        token: edittoken
      }, null, this.postWritePage, [links, index], null);
    } else {
      this.WM.Log.logWarning((this.WM.Log.linkToWikiPage(title, title)) + " must be checked manually");
      return this.iteratePages(links, index + 1);
    }
  };

  TempZh.prototype.postWritePage = function(res, arg) {
    var index, links;
    links = arg[0], index = arg[1];
    if (res.edit && res.edit.result === 'Success') {
      return this.iteratePages(links, index + 1);
    } else {
      return this.WM.Log.logError(res['error']['info'] + " (" + res['error']['code'] + ")");
    }
  };

  return TempZh;

})();
