// Generated by CoffeeScript 1.12.2
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports.SynchronizeInterlanguageLinks = (function() {
  SynchronizeInterlanguageLinks.REQUIRES_GM = false;

  function SynchronizeInterlanguageLinks(WM) {
    this.WM = WM;
    this.mainAutoEnd = bind(this.mainAutoEnd, this);
    this.mainAutoWrite = bind(this.mainAutoWrite, this);
    this.mainEnd = bind(this.mainEnd, this);
    this.mainContinue = bind(this.mainContinue, this);
    this.computeSupportedLangs = bind(this.computeSupportedLangs, this);
    this.computeWhiteList = bind(this.computeWhiteList, this);
    this.detectLang = bind(this.detectLang, this);
  }

  SynchronizeInterlanguageLinks.prototype.detectLang = function(title, tag) {
    var detect, pureTitle;
    if (tag === "ArchWiki") {
      detect = this.WM.ArchWiki.detectLanguage(title);
      pureTitle = detect[0];
      tag = this.WM.ArchWiki.getInterlanguageTag(detect[1]);
    } else {
      pureTitle = title;
    }
    return [pureTitle, tag];
  };

  SynchronizeInterlanguageLinks.prototype.computeWhiteList = function(whitelist) {
    if (whitelist === "ArchWiki") {
      if (typeof GM_emulation !== "undefined" && GM_emulation !== null) {
        return this.WM.ArchWiki.getInternalInterwikiLanguages();
      } else {
        return this.WM.ArchWiki.getInterwikiLanguages();
      }
    } else {
      return whitelist;
    }
  };

  SynchronizeInterlanguageLinks.prototype.computeSupportedLangs = function(supportedLangs) {
    if (supportedLangs === "ArchWiki") {
      return this.WM.ArchWiki.getInterwikiLanguages();
    } else {
      return supportedLangs;
    }
  };

  SynchronizeInterlanguageLinks.prototype.main = function(args, callNext) {
    var detect, pureTitle, supportedLangs, tag, title, whitelist;
    title = this.WM.Editor.getTitle();
    detect = this.detectLang(title, args[0]);
    pureTitle = detect[0];
    tag = detect[1];
    whitelist = this.computeWhiteList(args[1]);
    supportedLangs = this.computeSupportedLangs(args[2]);
    this.WM.Log.logInfo("Synchronizing interlanguage links ...");
    return this.WM.MW.getInterwikiMap(title, this.mainContinue, [tag, pureTitle, supportedLangs, whitelist, title, callNext]);
  };

  SynchronizeInterlanguageLinks.prototype.mainContinue = function(iwmap, args) {
    var api, callNext, i, langlinks, len, link, newlinks, nlink, pureTitle, source, supportedLangs, tag, title, url, visitedlinks, vlink, whitelist, wikiUrls;
    tag = args[0];
    pureTitle = args[1];
    supportedLangs = args[2];
    whitelist = args[3];
    title = args[4];
    callNext = args[5];
    source = this.WM.Editor.readSource();
    langlinks = this.WM.Interlanguage.parseLinks(supportedLangs, source, iwmap);
    wikiUrls = this.WM.MW.getWikiUrls();
    url = wikiUrls.short + encodeURIComponent(this.WM.Parser.squashContiguousWhitespace(title));
    api = wikiUrls.api;
    visitedlinks = {};
    visitedlinks[tag.toLowerCase()] = this.WM.Interlanguage.createVisitedLink(tag, pureTitle, url, iwmap, api, source, null, null, langlinks);
    newlinks = {};
    this.WM.Log.logInfo("Reading " + this.WM.Log.linkToPage(url, "edited article") + " ...");
    if (langlinks) {
      for (i = 0, len = langlinks.length; i < len; i++) {
        link = langlinks[i];
        nlink = newlinks[link.lang.toLowerCase()];
        vlink = visitedlinks[link.lang.toLowerCase()];
        if (!vlink && !nlink) {
          newlinks[link.lang.toLowerCase()] = this.WM.Interlanguage.createNewLink(link.lang, link.title, link.url);
        } else if (vlink && vlink.url !== link.url) {
          this.WM.Log.logWarning("Possibly conflicting interlanguage " + "links: " + this.WM.Log.linkToPage(link.url, "[[" + link.lang + ":" + link.title + "]]") + " and " + this.WM.Log.linkToPage(vlink.url, "[[" + link.lang + ":" + visitedlinks[link.lang.toLowerCase()].title + "]]"));
        } else if (nlink && nlink.url !== link.url) {
          this.WM.Log.logWarning("Possibly conflicting interlanguage " + "links: " + this.WM.Log.linkToPage(link.url, "[[" + link.lang + ":" + link.title + "]]") + " and " + this.WM.Log.linkToPage(nlink.url, "[[" + link.lang + ":" + newlinks[link.lang.toLowerCase()].title + "]]"));
        }
      }
      return this.WM.Interlanguage.collectLinks(visitedlinks, newlinks, supportedLangs, whitelist, false, this.mainEnd, [tag, url, source, langlinks, iwmap, callNext]);
    } else {
      this.WM.Log.logInfo("No interlanguage links found");
      if (callNext) {
        return callNext();
      }
    }
  };

  SynchronizeInterlanguageLinks.prototype.mainEnd = function(links, args) {
    var callNext, iwmap, langlinks, newText, source, tag, url;
    tag = args[0];
    url = args[1];
    source = args[2];
    langlinks = args[3];
    iwmap = args[4];
    callNext = args[5];
    newText = this.WM.Interlanguage.updateLinks(tag, url, iwmap, source, langlinks, links);
    if (newText !== source) {
      this.WM.Editor.writeSource(newText);
      this.WM.Log.logInfo("Synchronized interlanguage links");
    } else {
      this.WM.Log.logInfo("Interlanguage links were already synchronized");
    }
    if (callNext) {
      return callNext();
    }
  };

  SynchronizeInterlanguageLinks.prototype.mainAuto = function(args, title, callBot, chainArgs) {
    var detect, newlinks, pureTitle, summary, supportedLangs, tag, url, visitedlinks, whitelist, wikiUrls;
    detect = this.detectLang(title, args[0]);
    pureTitle = detect[0];
    tag = detect[1];
    whitelist = this.computeWhiteList(args[1]);
    supportedLangs = this.computeSupportedLangs(args[2]);
    summary = args[3];
    wikiUrls = this.WM.MW.getWikiUrls();
    url = wikiUrls.short + encodeURIComponent(this.WM.Parser.squashContiguousWhitespace(title));
    visitedlinks = {};
    newlinks = {};
    newlinks[tag.toLowerCase()] = this.WM.Interlanguage.createNewLink(tag, pureTitle, url);
    return this.WM.Interlanguage.collectLinks(visitedlinks, newlinks, supportedLangs, whitelist, true, this.mainAutoWrite, [title, url, tag, summary, callBot]);
  };

  SynchronizeInterlanguageLinks.prototype.mainAutoWrite = function(links, args) {
    var callBot, edittoken, iwmap, langlinks, lcTag, newText, source, summary, tag, timestamp, title, url;
    title = args[0];
    url = args[1];
    tag = args[2];
    summary = args[3];
    callBot = args[4];
    lcTag = tag.toLowerCase();
    iwmap = links[lcTag].iwmap;
    source = links[lcTag].source;
    langlinks = links[lcTag].links;
    timestamp = links[lcTag].timestamp;
    edittoken = links[lcTag].edittoken;
    newText = this.WM.Interlanguage.updateLinks(tag, url, iwmap, source, langlinks, links);
    if (newText !== source) {
      return this.WM.MW.callAPIPost({
        action: "edit",
        bot: "1",
        title: title,
        summary: summary,
        text: newText,
        basetimestamp: timestamp,
        token: edittoken
      }, null, this.mainAutoEnd, callBot, null);
    } else {
      return callBot(0, null);
    }
  };

  SynchronizeInterlanguageLinks.prototype.mainAutoEnd = function(res, callBot) {
    if (res.edit && res.edit.result === 'Success') {
      return callBot(1, null);
    } else if (res.error) {
      this.WM.Log.logError(res.error.info + " (" + res.error.code + ")");
      return callBot(res.error.code, null);
    } else {
      return callBot(false, null);
    }
  };

  return SynchronizeInterlanguageLinks;

})();
