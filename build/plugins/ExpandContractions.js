// Generated by CoffeeScript 1.10.0
module.exports.ExpandContractions = (function() {
  var replace;

  function ExpandContractions(WM) {
    this.WM = WM;
  }

  replace = function(source, regExp, newString, checkString, checkStrings) {
    var newtext;
    newtext = source.replace(regExp, newString);
    if (checkStrings.length > 1 && newtext !== source) {
      this.WM.Log.logWarning("Replaced some \"" + checkString + "\" with \"" + checkStrings[0] + "\": check that it didn't mean \"" + checkStrings.slice(1).join("\" or \"") + "\" instead");
    }
    return newtext;
  };

  ExpandContractions.prototype.main = function(args, callNext) {
    var newtext, source, ss;
    source = this.WM.Editor.readSource();
    newtext = source;
    newtext = replace(newtext, /([a-z])'re/ig, '$1 are', "'re", ["are"]);
    newtext = replace(newtext, /([a-z])'ve/ig, '$1 have', "'ve", ["have"]);
    newtext = replace(newtext, /([a-z])'ll/ig, '$1 will', "'ll", ["will", "shall"]);
    newtext = replace(newtext, /([a-z])'d/ig, '$1 would', "'d", ["would", "had"]);
    newtext = replace(newtext, /(c)an't/ig, '$1annot', "can't", ["cannot"]);
    newtext = replace(newtext, /(w)on't/ig, '$1ill not', "won't", ["will not"]);
    newtext = replace(newtext, /([a-z])n't/ig, '$1 not', "n't", ["not"]);
    newtext = replace(newtext, /(here|there)'s/ig, '$1 is', "here/there's", ["here/there is", "here/there has"]);
    newtext = replace(newtext, /(g)onna/ig, '$1oing to', "gonna", ["going to"]);
    newtext = replace(newtext, /([a-z])'s (been)/ig, '$1 has $2', "'s been", ["has been"]);
    newtext = replace(newtext, /(let)'s/ig, '$1 us', "let's", ["let us"]);
    newtext = replace(newtext, /(it)'(s own)/ig, '$1$2', "it's own", ["its own"]);
    ss = newtext.match(/[a-z]'s/gi);
    if (ss) {
      this.WM.Log.logWarning("Found " + ss.length + " instances of \"'s\": " + "check if they can be replaced with \"is\", \"has\", ...");
    }
    if (newtext !== source) {
      this.WM.Editor.writeSource(newtext);
      this.WM.Log.logInfo("Expanded contractions");
    }
    if (callNext) {
      return callNext();
    }
  };

  return ExpandContractions;

})();
