// Generated by CoffeeScript 1.12.2
module.exports.FixFragments = (function() {
  FixFragments.REQUIRES_GM = false;

  function FixFragments(WM) {
    this.WM = WM;
  }

  FixFragments.prototype.fixLinks = function(source) {
    var i, ilinks, j, len, len1, link, newtext1, newtext2, prevId, rawfragment, sections, slinks, title;
    title = this.WM.Editor.getTitle();
    sections = this.WM.Parser.findSectionHeadings(source).sections;
    slinks = this.WM.Parser.findSectionLinks(source);
    newtext1 = "";
    prevId = 0;
    for (i = 0, len = slinks.length; i < len; i++) {
      link = slinks[i];
      newtext1 += source.substring(prevId, link.index);
      newtext1 += this.fixLink(source, sections, link.rawLink, link.fragment, link.anchor);
      prevId = link.index + link.length;
    }
    newtext1 += source.substr(prevId);
    ilinks = this.WM.Parser.findInternalLinks(newtext1, null, title);
    newtext2 = "";
    prevId = 0;
    for (j = 0, len1 = ilinks.length; j < len1; j++) {
      link = ilinks[j];
      newtext2 += newtext1.substring(prevId, link.index);
      rawfragment = link.fragment;
      if (rawfragment) {
        newtext2 += this.fixLink(newtext1, sections, link.rawLink, rawfragment, link.anchor);
      } else {
        newtext2 += link.rawLink;
      }
      prevId = link.index + link.length;
    }
    newtext2 += newtext1.substr(prevId);
    return newtext2;
  };

  FixFragments.prototype.fixLink = function(source, sections, rawlink, rawfragment, lalt) {
    var dotFragment, dotHeading, escHeading, fragment, heading, i, len, section;
    fragment = this.WM.Parser.squashContiguousWhitespace(rawfragment).trim();
    for (i = 0, len = sections.length; i < len; i++) {
      section = sections[i];
      heading = section.cleanheading;
      dotHeading = this.WM.Parser.dotEncode(heading);
      dotFragment = this.WM.Parser.dotEncode(fragment);
      if (dotHeading.toLowerCase() === dotFragment.toLowerCase()) {
        if (fragment === dotFragment) {
          return "[[#" + dotHeading + (lalt ? "|" + lalt : "") + "]]";
        } else {
          escHeading = this.WM.Parser.dotEncodeLinkBreakingFragmentCharacters(heading);
          return "[[#" + escHeading + (lalt ? "|" + lalt : "") + "]]";
        }
      }
    }
    this.WM.Log.logWarning("Cannot fix broken section link: " + rawlink);
    return rawlink;
  };

  FixFragments.prototype.main = function(args, callNext) {
    var newtext, source;
    source = this.WM.Editor.readSource();
    newtext = this.fixLinks(source);
    if (newtext !== source) {
      this.WM.Editor.writeSource(newtext);
      this.WM.Log.logInfo("Fixed section links");
    } else {
      this.WM.Log.logInfo("No fixable section links found");
    }
    if (callNext) {
      return callNext();
    }
  };

  return FixFragments;

})();
