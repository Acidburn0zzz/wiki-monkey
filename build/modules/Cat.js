// Generated by CoffeeScript 1.11.1
var Async, Obj;

Async = require('../../lib.js.generic/dist/Async');

Obj = require('../../lib.js.generic/dist/Obj');

module.exports.Cat = (function() {
  function Cat(WM1) {
    this.WM = WM1;
    null;
  }

  Cat.prototype.recurseTree = function(params) {
    params.callChildren = WM.Cat._recurseTreeCallChildren;
    return Async.recurseTreeAsync(params);
  };

  Cat.prototype.recurseTreeContinue = function(params) {
    return Async.recurseTreeAsync(params);
  };

  Cat.prototype._recurseTreeCallChildren = function(params) {
    return WM.Cat.getSubCategories(params.node, WM.Cat._recurseTreeCallChildrenContinue, params);
  };

  Cat.prototype._recurseTreeCallChildrenContinue = function(subCats, params) {
    var i, len, subCat;
    for (i = 0, len = subCats.length; i < len; i++) {
      subCat = subCats[i];
      params.children.push(subCat.title);
    }
    return Async.recurseTreeAsync(params);
  };

  Cat.prototype.getSubCategories = function(parent, call, callArgs) {
    return WM.Cat._getMembers(parent, "subcat", call, callArgs);
  };

  Cat.prototype.getAllMembers = function(parent, call, callArgs) {
    return WM.Cat._getMembers(parent, null, call, callArgs);
  };

  Cat.prototype._getMembers = function(name, cmtype, call, callArgs) {
    var query;
    query = {
      action: "query",
      list: "categorymembers",
      cmtitle: name,
      cmlimit: 500
    };
    if (cmtype) {
      query.cmtype = cmtype;
    }
    return this._getMembersContinue(query, call, callArgs, []);
  };

  Cat.prototype._getMembersContinue = function(query, call, callArgs, members) {
    return WM.MW.callAPIGet(query, null, function(res, args) {
      members = members.concat(res.query.categorymembers);
      if (res["query-continue"]) {
        query.cmcontinue = res["query-continue"].categorymembers.cmcontinue;
        return this._getMembersContinue(query, call, args, members);
      } else {
        return call(members, args);
      }
    }, callArgs, null);
  };

  Cat.prototype.getParentsAndInfo = function(name, call, callArgs) {
    var query;
    query = {
      action: "query",
      prop: "categories|categoryinfo",
      titles: name,
      clprop: "hidden",
      cllimit: 500
    };
    return this._getParentsAndInfoContinue(query, call, callArgs, [], null);
  };

  Cat.prototype._getParentsAndInfoContinue = function(query, call, callArgs, parents, info) {
    return WM.MW.callAPIGet(query, null, function(res, args) {
      var page;
      page = Obj.getFirstItem(res.query.pages);
      if (page.categories) {
        parents = parents.concat(page.categories);
      }
      if (page.categoryinfo) {
        info = page.categoryinfo;
      }
      if (res["query-continue"]) {
        query.prop = "categories";
        query.clcontinue = res["query-continue"].categories.clcontinue;
        return this._getParentsAndInfoContinue(query, call, args, parents, info);
      } else {
        return call(parents, info, args);
      }
    }, callArgs, null);
  };

  return Cat;

})();
