// Generated by CoffeeScript 1.11.1
var $, CSS, DOM,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

CSS = require('../../lib.js.generic/dist/CSS');

DOM = require('../../lib.js.generic/dist/DOM');

module.exports.Cfg = (function() {
  var DEFAULTS_REQUEST;

  DEFAULTS_REQUEST = "WARNING: If you click on the \"Save\" button now, the saved configuration will be reset to the default values at the next refresh!\nTo cancel this request, simply click on the \"Reset\" button.";

  function Cfg(WM) {
    this.WM = WM;
    this.exportEditor = bind(this.exportEditor, this);
    this.importFile = bind(this.importFile, this);
    this.requestDefaults = bind(this.requestDefaults, this);
    this.resetEditor = bind(this.resetEditor, this);
    this.saveEditor = bind(this.saveEditor, this);
    this.save = bind(this.save, this);
    this._doMakeUI = bind(this._doMakeUI, this);
    this.config = {};
  }

  Cfg.prototype._makeUI = function() {
    return DOM.waitUntilJQuerySelectorMatches('#preftoc', this._doMakeUI, [], 500);
  };

  Cfg.prototype._doMakeUI = function() {
    var bdiv, editor, help, link, list, plugin, toc;
    CSS.addStyleElement("#WikiMonkey-prefsection textarea { height:30em;} #WikiMonkey-prefsection div, #WikiMonkey-prefsection p.message {display:inline-block; margin-bottom:0.5em;} #WikiMonkey-prefsection input {margin-right:0.5em;} #WikiMonkey-prefsection input[value='Save'] {font-weight:bold;}");
    toc = $("#preftoc");
    toc.find("a").click(this._hideEditor);
    link = $("<a/>").attr({
      "id": "WikiMonkey-preftab",
      "href": "#wiki-monkey",
      "role": "tab",
      "aria-controls": "WikiMonkey-config",
      "tabindex": "-1",
      "aria-selected": "false"
    }).text("Wiki Monkey").click(this._showEditor);
    $("<li/>").appendTo(toc).append(link);
    editor = $("<fieldset/>").addClass("prefsection").attr("id", "WikiMonkey-prefsection").hide();
    $("<legend/>").addClass("mainLegend").text("Wiki Monkey").appendTo(editor);
    bdiv = $("<div/>");
    $("<input/>").attr("type", "button").val("Save").click(this.saveEditor).appendTo(bdiv);
    $("<input/>").attr("type", "button").val("Reset").click(this.resetEditor).appendTo(bdiv);
    $("<input/>").attr("type", "button").val("Defaults").click(this.requestDefaults).appendTo(bdiv);
    $("<input/>").attr("type", "button").val("Import").click(this.importFile).appendTo(bdiv);
    $("<input/>").attr({
      "type": "file",
      "id": "WikiMonkey-import"
    }).change(this.doImportFile).appendTo(bdiv).hide();
    $("<input/>").attr("type", "button").val("Export").click(this.exportEditor).appendTo(bdiv);
    $("<a/>").attr({
      "id": "WikiMonkey-export",
      "download": "WikiMonkey.conf"
    }).appendTo(bdiv);
    editor.append(bdiv);
    help = $("<a/>").attr("href", "https://github.com/kynikos/wiki-monkey/wiki").text("[help]");
    $("<p/>").addClass("message").text("All pages running Wiki Monkey need to be refreshed for saved changes to take effect. ").append(help).appendTo(editor);
    $("<textarea/>").attr("id", "WikiMonkey-editor").appendTo(editor);
    $("<p/>").text('Wiki Monkey version: ' + GM_info.script.version).appendTo(editor);
    $("<p/>").text("Actually installed plugins (in general, a subset of those set in the loaded configuration):").appendTo(editor);
    list = $("<ul/>");
    for (plugin in this.WM.Plugins) {
      $("<li/>").text(plugin).appendTo(list);
    }
    list.appendTo(editor);
    $("#preferences").children("fieldset").last().after(editor);
    this.resetEditor();
    if (location.hash === "#wiki-monkey") {
      return this._showEditor();
    }
  };

  Cfg.prototype._showEditor = function() {
    var editor, tab;
    tab = $("#WikiMonkey-preftab").parent();
    tab.siblings(".selected").removeClass("selected").children("a:first").attr({
      "tabindex": "-1",
      "aria-selected": "false"
    });
    tab.addClass("selected").children("a:first").attr({
      "tabindex": "0",
      "aria-selected": "true"
    });
    editor = $("#WikiMonkey-prefsection");
    editor.siblings("fieldset").hide();
    editor.show();
    return editor.siblings(".mw-prefs-buttons").hide();
  };

  Cfg.prototype._hideEditor = function() {
    var editor;
    $("#WikiMonkey-preftab").attr({
      "tabindex": "-1",
      "aria-selected": "false"
    }).parent().removeClass("selected");
    editor = $("#WikiMonkey-prefsection");
    editor.hide();
    return editor.siblings(".mw-prefs-buttons").show();
  };

  Cfg.prototype._load = function(defaultConfig) {
    var savedConfig, section, type;
    this.config = defaultConfig;
    savedConfig = JSON.parse(localStorage.getItem("WikiMonkey"));
    if (savedConfig) {
      for (section in savedConfig) {
        for (type in this.config[section]) {
          if (savedConfig[section][type]) {
            $.extend(this.config[section][type], savedConfig[section][type]);
          }
        }
      }
    }
    return this.save();
  };

  Cfg.prototype._getEditorPlugins = function() {
    return this.config["Plugins"]["Editor"];
  };

  Cfg.prototype._getDiffPlugins = function() {
    return this.config["Plugins"]["Diff"];
  };

  Cfg.prototype._getBotPlugins = function() {
    return this.config["Plugins"]["Bot"];
  };

  Cfg.prototype._getSpecialPlugins = function() {
    return this.config["Plugins"]["Special"];
  };

  Cfg.prototype._getRecentChangesPlugins = function() {
    return this.config["Plugins"]["RecentChanges"];
  };

  Cfg.prototype._getNewPagesPlugins = function() {
    return this.config["Plugins"]["NewPages"];
  };

  Cfg.prototype._getGeneralMods = function() {
    return this.config["Mods"]["General"];
  };

  Cfg.prototype._getEditorMods = function() {
    return this.config["Mods"]["Editor"];
  };

  Cfg.prototype._getRecentChangesMods = function() {
    return this.config["Mods"]["RecentChanges"];
  };

  Cfg.prototype._getContributionsMods = function() {
    return this.config["Mods"]["Contributions"];
  };

  Cfg.prototype.save = function() {
    return localStorage.setItem("WikiMonkey", JSON.stringify(this.config));
  };

  Cfg.prototype.saveEditor = function() {
    var err, text;
    text = $("#WikiMonkey-editor").val();
    try {
      this.config = JSON.parse(text);
    } catch (error) {
      err = error;
      if (text === DEFAULTS_REQUEST) {
        this.config = {};
        $("#WikiMonkey-editor").val("The configuration has been reset to the default values and will be available after refreshing the page.");
      } else {
        alert("Not a valid JSON object, the configuration has not been saved.");
        return false;
      }
    }
    return this.save();
  };

  Cfg.prototype.resetEditor = function() {
    return $("#WikiMonkey-editor").val(JSON.stringify(this.config, void 0, 4));
  };

  Cfg.prototype.requestDefaults = function() {
    return $("#WikiMonkey-editor").val(DEFAULTS_REQUEST);
  };

  Cfg.prototype.importFile = function() {
    return $("#WikiMonkey-import").trigger("click");
  };

  Cfg.prototype.doImportFile = function() {
    var file, freader;
    file = this.files[0];
    freader = new FileReader();
    freader.onload = function(fileLoadedEvent) {
      return $("#WikiMonkey-editor").val(fileLoadedEvent.target.result);
    };
    return freader.readAsText(file, "UTF-8");
  };

  Cfg.prototype.exportEditor = function() {
    var blob, link;
    blob = new Blob([$("#WikiMonkey-editor").val()], {
      type: 'text/plain'
    });
    link = $("#WikiMonkey-export").attr("href", window.URL.createObjectURL(blob));
    return link[0].click();
  };

  return Cfg;

})();
